var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VP4Optim","category":"page"},{"location":"#VP4Optim","page":"Home","title":"VP4Optim","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VP4Optim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [VP4Optim]","category":"page"},{"location":"#VP4Optim.Model","page":"Home","title":"VP4Optim.Model","text":"Model{Ny,Nx,Nc,T}\n\nAbstract supertype of any model specification.\n\nType parameters\n\nNy::Int: length of data vector y.\nNx::Int: number of variable parameters.\nNc::Int: number of linear coefficients.\nT <: Union{Float64, ComplexF64}: typeof(y)\n\nRecommended use\n\nimport VP4Optim as VP\n\nmutable struct SpecificModel{Ny,Nx,Nc,T} <: VP.Model{Ny,Nx,Nc,T}\n    # mandatory fields of any Model instance\n    sym::Vector{Symbol}         # names of all parameters, variable and fixed \n    x_sym::Vector{Symbol}       # names of variable parameters\n    par_sym::Vector{Symbol}     # names of fixed parameters\n    val::Vector{Float64}        # values of all parameters, variable and fixed\n    x_ind::SVector{Nx,Int}      # indices of variable parameters in field val (order defined by x_sym)\n    par_ind::Vector{Int}        # indices of fixed parameters in field val (order defined by par_sym)\n    y::SVector{Ny,T}            # actual data vector\n    y2::Float64                 # == real(y' * y) (automatically calculated in generic method VP.y!)\n\n    # model-specific information\n    # ....\nend\n\n\n\n\n\n","category":"type"},{"location":"#VP4Optim.A-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.A","text":"A(::Model)\n\nReturn VARPRO matrix A.\n\nMust be implemented by each model.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.Bb!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.Bb!","text":"Bb!(mod::Model)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.P-Union{Tuple{T}, Tuple{Nc}, Tuple{Nx}, Tuple{Ny}, Tuple{VP4Optim.Model{Ny, Nx, Nc, T}, Any}} where {Ny, Nx, Nc, T}","page":"Home","title":"VP4Optim.P","text":"P(mod::Model{Ny,Nx,Nc,T}, x) where {Ny,Nx,Nc,T}\n\nReturns Hessian of model mod at x.\n\nCan be used as preconditioner.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.c-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.c","text":"c(mod::Model)\n\nReturn VARPRO vector c.\n\nCalculates generic soluion c = B \\ b. Can be replaced by model-specific implementation, if desired (e.g. for performance improvements).\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.f-Tuple{Any, Any, Any}","page":"Home","title":"VP4Optim.f","text":"f(y2, B, b)\n\nShould not be called directly.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.f-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.f","text":"f(mod::Model)\n\nReturn function f of argument x to be minimized, as expected by Optim.jl\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.fg!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.fg!","text":"fg!(mod::Model)\n\nReturn function fg! of three arguments (F, G, x) as expected by Optim.jl.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.fg!-Union{Tuple{T}, Tuple{Nc}, Tuple{Nx}, Tuple{Ny}, Tuple{VP4Optim.Model{Ny, Nx, Nc, T}, Vararg{Any, 7}}} where {Ny, Nx, Nc, T}","page":"Home","title":"VP4Optim.fg!","text":"fg!(::Model{Ny,Nx,Nc,T}, F, G, y2, B, b, ∂B, ∂b) where {Ny,Nx,Nc,T}\n\nShould not be called directly.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.fgh!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.fgh!","text":"fgh!(mod::Model)\n\nReturn function fgh! of four arguments (F, G, H, x) as expected by Optim.jl.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.fgh!-Union{Tuple{T}, Tuple{Nc}, Tuple{Nx}, Tuple{Ny}, Tuple{VP4Optim.Model{Ny, Nx, Nc, T}, Vararg{Any, 10}}} where {Ny, Nx, Nc, T}","page":"Home","title":"VP4Optim.fgh!","text":"fgh!(::Model{Ny,Nx,Nc,T}, F, G, H, y2, B, b, ∂B, ∂b, ∂∂B, ∂∂b) where {Ny,Nx,Nc,T}\n\nShould not be called directly.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.par!-Tuple{VP4Optim.Model, AbstractArray, AbstractArray}","page":"Home","title":"VP4Optim.par!","text":"par!(mod::Model, p_syms::AbstractArray, p_vals::AbstractArray)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.par!-Tuple{VP4Optim.Model, AbstractArray}","page":"Home","title":"VP4Optim.par!","text":"par!(mod::Model, new_par::AbstractArray)\n\nReset fixed parameter values.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.par-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.par","text":"par(mod::Model)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.par_changed!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.par_changed!","text":"par_changed!(::Model)\n\nNotify model that (some of the) fixed parameters par have changed.\n\nFunction is automatically called by  Can be used to implement \n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.par_sym-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.par_sym","text":"par_sym(mod::Model)\n\nReturns iterable of fixed model parameters.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.sym-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.sym","text":"sym(mod::Model)\n\nReturn iterable of model parameter names (each with type == Symbol).\n\nAll model parameters are returned, variable and fixed ones. These are assumed to be stored in the field sym of mod.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.val-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.val","text":"val(mod::Model)\n\nReturns vector (::Vector{Float64}) of all model parameters.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.x!-Tuple{VP4Optim.Model, AbstractArray, AbstractArray}","page":"Home","title":"VP4Optim.x!","text":"x!(mod::Model, new_x::AbstractArray)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.x!-Tuple{VP4Optim.Model, AbstractArray}","page":"Home","title":"VP4Optim.x!","text":"x!(mod::Model, new_x::AbstractArray)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.x-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.x","text":"x(mod::Model)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.x_changed!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.x_changed!","text":"x_changed!(::Model)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.x_sym-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.x_sym","text":"x_sym(mod::Model)\n\nReturn iterable of variable model parameters.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.y!-Union{Tuple{T}, Tuple{Nc}, Tuple{Nx}, Tuple{Ny}, Tuple{VP4Optim.Model{Ny, Nx, Nc, T}, AbstractArray}} where {Ny, Nx, Nc, T}","page":"Home","title":"VP4Optim.y!","text":"y!(mod::Model{Ny,Nx,Nc,T}, new_y::AbstractArray) where {Ny,Nx,Nc,T}\n\nSet the data vector.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.y-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.y","text":"y(mod::Model)\n\nReturns the data vector\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.y_model-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.y_model","text":"y_model(mod::Model)\n\nCompute model prediction A(mod) * c(mod) at actual x.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.χ2-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.χ2","text":"χ2(mod::Model)\n\nReturn χ² of actual model.\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.∂Bb!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.∂Bb!","text":"∂Bb!(::Model)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"#VP4Optim.∂∂Bb!-Tuple{VP4Optim.Model}","page":"Home","title":"VP4Optim.∂∂Bb!","text":"∂∂Bb!(::Model)\n\nTBW\n\n\n\n\n\n","category":"method"}]
}
